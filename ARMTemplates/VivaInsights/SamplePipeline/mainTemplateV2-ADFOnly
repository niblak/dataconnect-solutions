{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  // Parameters are values that are configurable by the partner.
  "parameters": {
    "AzureActiveDirectoryTenantId": {
        "type": "string",
        "metadata": {
          "description": "The Azure Active Directory Tenant Id of the customer whose data needs to be extracted."
        }
    },
    "AppId": {
        "type": "string",
        "metadata": {
            "description": "The id of the Azure AD Application that has permission to run the ADF pipeline. This should be a multi tenant application."
        }
    },
    "AppObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the app registration (this can be found under App registrations -> Select you app -> Click on Managed application in local directory -> Object ID)."
      }
    },
    "DataFactoryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Data Factory instance containing your pipeline logic."
      }
    },
    "DataLakeStorageName": {
        "type": "string",
        "metadata": {
          "description": "The name of your Data Lake storage account."
        }
      },
    "DataLakeStorageEndpoint": {
      "type": "string",
      "metadata": {
        "description": "The endpoint of your Data Lake storage account (this can be found under Settings -> Endpoints -> Data Lake Storage primary endpoint in your Storage Account)."
      }
    },
    "AppSecretKeyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Key Vault to be used for authenticating the ADLS Sink."
      }
    },
    "AppSecretKeyVaultSecretName": {
      "type": "string",
      "metadata": {
        "description": "The name of the secret in the Azure Key Vault to be used for authenticating the ADLS Sink."
      }
    },
    "DataSetName": {
        "type": "string",
        "metadata": {
          "description": "The name of the any of the consented dataset that needs to be extracted via the Data Factory."
        } 
    }
  },
  // Variables can apply functions to parameters or be hardcoded values.
  "variables": {
    "appSecretKeyVaultLink": "appSecretKeyVaultLink",
    "dataFactoryAppResourceId": "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
  },
  "resources": [
    // Add Key Vault Secrets User role assignment to the App Secret Key Vault.
    {
      "name": "[concat(parameters('AppSecretKeyVaultName'),'/Microsoft.Authorization/',guid(concat(parameters('AppSecretKeyVaultName'), parameters('DataFactoryName'), resourceGroup().id)))]",
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "apiVersion": "2022-04-01",
      "properties": {
        "principalId": "[reference(variables('dataFactoryAppResourceId'), '2018-06-01', 'Full').identity.principalId]",
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
      ]
    },
    // Create a container in the storage account
    {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2021-01-01",
        "name": "[concat(parameters('DataLakeStorageName'), '/default/datasets')]",
        "properties": {
          "defaultEncryptionScope": "$account-encryption-key",
          "denyEncryptionScopeOverride": false,
          "publicAccess": "None"
        }
    },
    // Add Contributor role assignment to the storage account container
    {
      "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('DataLakeStorageName'), 'default', 'datasets')]"
      ],
      "name": "[concat(parameters('DataLakeStorageName'),'/Microsoft.Authorization/',guid(resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[parameters('AppObjectId')]"
      }
    },
    // Add Storage Blob Data Contributor role assignment to the storage account container
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/providers/roleAssignments",
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('DataLakeStorageName'), 'default', 'datasets')]"
      ],
      "name": "[concat(parameters('DataLakeStorageName'), '/default/datasets/Microsoft.Authorization/', guid(concat('blobdatacontributor', resourceGroup().id)))]",
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[parameters('AppObjectId')]"
      }
    },
    // Add Azure Data Factory Resource
    {
      "name": "[parameters('DataFactoryName')]",
      "apiVersion": "2018-06-01",
      "type": "Microsoft.DataFactory/factories",
      "comments": "Creates the ADF pipeline that copies data from O365 to the newly created destination ADLS.",
      "dependsOn": [],
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "West US 2",
      "resources": [
        // Define the Data Factory integration run time.
        {
          "name": "[concat(parameters('DataFactoryName'), '/AzureSelfHosted')]",
          "type": "Microsoft.DataFactory/factories/integrationRuntimes",
          "apiVersion": "2018-06-01",
          "properties": {
            "type": "Managed",
            "typeProperties": {
              "computeProperties": {
                "location": "West US 2",
                "dataFlowProperties": {
                  "computeType": "General",
                  "coreCount": 8,
                  "timeToLive": 10
                }
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define the ADLS sink linked service.
        {
          "name": "[concat(parameters('DataFactoryName'), '/ADLSSink')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobFS",
            "typeProperties": {
              "url": "[parameters('DataLakeStorageEndpoint')]",
              "tenant": "[subscription().tenantId]",
              "servicePrincipalId": "[parameters('AppId')]",
              "servicePrincipalCredentialType": "ServicePrincipalKey",
              "servicePrincipalCredential": {
                "type": "AzureKeyVaultSecret",
                "secretName": "[parameters('AppSecretKeyVaultSecretName')]",
                "secretVersion": "",
                "store": {
                  "referenceName": "[variables('appSecretKeyVaultLink')]",
                  "type": "LinkedServiceReference"
                }
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]",
            "[variables('appSecretKeyVaultLink')]"
          ]
        },
        // Define the linked service for key vault for service principal secret.
        {
          "name": "[concat(parameters('DataFactoryName'), '/', variables('appSecretKeyVaultLink'))]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureKeyVault",
            "typeProperties": {
              "baseUrl": "[concat('https://', parameters('AppSecretKeyVaultName'), '.vault.azure.net/')]"
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define the sink for Viva Insights data output in partner tenant
        {
          "name": "[concat(parameters('DataFactoryName'), '/VivaInsightsSink')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "ADLSSink",
              "type": "LinkedServiceReference"
            },
            "parameters": {
              "AzureActiveDirectoryTenantId": {
                "type": "string",
                "defaultValue": "[parameters('AzureActiveDirectoryTenantId')]"
              }
            },
            "annotations": [],
            "type": "Binary",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "folderPath": {
                  "value": "@concat(pipeline().RunId, '/VivaInsights/', dataset().AzureActiveDirectoryTenantId)",
                  "type": "Expression"
                },
                "fileSystem": "datasets"
              }
            }
          },
          "dependsOn": [
            "ADLSSink",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define O365 source linked service (this will be using MGDC)
        {
          "name": "[concat(parameters('DataFactoryName'), '/Office365Service')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "Office365",
            "typeProperties": {
              "office365TenantId": "[parameters('AzureActiveDirectoryTenantId')]",
              "servicePrincipalTenantId": "[subscription().tenantId]",
              "servicePrincipalId": "[parameters('AppId')]",
              "servicePrincipalKey": {
                "type": "AzureKeyVaultSecret",
                "store": {
                  "referenceName": "[variables('appSecretKeyVaultLink')]",
                  "type": "LinkedServiceReference"
                },
                "secretName": "[parameters('AppSecretKeyVaultSecretName')]"
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]",
            "[variables('appSecretKeyVaultLink')]"
          ]
        },
        // Define the O365 source dataset to extract by MGDC
        {
          "name": "[concat(parameters('DataFactoryName'), '/Office365DataSet', parameters('DatasetName'))]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "Office365Service",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "parameters": {},
            "type": "Office365Table",
            // TODO: Update your desired report structure (metric names and types) below.
            "structure": [
              {
                "name": "PersonId",
                "type": "string",
                "description": " "
              },
              {
                "name": "MetricDate",
                "type": "datetime",
                "description": " "
              },
              {
                "name": "After-hours email hours",
                "type": "float",
                "description": " "
              }
            ],
            "typeProperties": {
              "tableName": "[parameters('DatasetName')]"
            }
          },
          "dependsOn": [
            "Office365Service",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        },
        // Define a pipeline to export the events from Customer O365 tenant to the Azure storage.
        {
          "name": "[concat(parameters('DataFactoryName'), '/ExportO365DataEvents')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Copy Viva Insights Data",
                "type": "Copy",
                "dependsOn": [

                ],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [

                ],
                "typeProperties": {
                  "source": {
                    "type": "Office365Source"
                  },
                  "sink": {
                    "type": "BinarySink",
                    "storeSettings": {
                      "type": "AzureBlobFSWriteSettings"
                    }
                  },
                  "enableStaging": false
                },
                "inputs": [
                  {
                    "referenceName": "[concat('Office365DataSet', parameters('DatasetName'))]",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ],
                "outputs": [
                  {
                    "referenceName": "VivaInsightsSink",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ]
              }
            ],
            "parameters": {},
            "annotations": []
          },
          "dependsOn": [
            "[concat('Office365DataSet', parameters('DatasetName'))]",
            "VivaInsightsSink",
            "[resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName'))]"
          ]
        }
      ]
    },
    // Add a trigger that runs the pipeline once a week
    {
      "name": "[concat(parameters('DataFactoryName'), '/ScheduledTrigger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Runs the pipeline once a week.",
        "annotations": [],
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "ExportO365DataEvents",
              "type": "PipelineReference"
            },
            "parameters": {}
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 7,
            "startTime": "2021-10-08T18:04:00Z",
            "timeZone": "UTC",
            "schedule": {}
          }
        }
      },
      "dependsOn": [
        "[concat(resourceId('Microsoft.DataFactory/factories', parameters('DataFactoryName')), '/pipelines/ExportO365DataEvents')]"
      ]
    }
  ]
}
