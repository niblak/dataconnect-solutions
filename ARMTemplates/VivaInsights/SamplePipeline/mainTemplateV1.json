{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  // Parameters are values that are configurable by the customer.
  "parameters": {
    "AppId": {
      "type": "string",
      "metadata": {
        "description": "The id of the Azure AD Application that has access to the Customer Azure Storage Account (1st hop)."
      }
    },
    "AppSecret": {
      "type": "securestring",
      "metadata": {
        "description": "The secret for the Azure AD Application that has access to the Customer Azure Storage Account (1st hop). App Secret is required for Microsoft Graph Data Connect (see documentation https://docs.microsoft.com/en-us/graph/data-connect-quickstart?tabs=Microsoft365&tutorial-step=2)."
      }
    },
    "DataSet": {
      "type": "string",
      "allowedValues": [
        "BasicDataSet_v0.Event_v1",
        "BasicDataSet_v0.MailboxSettings_v0"
      ],
      "metadata": {
        "description": "The name of the dataset to export using MGDC."
      }
    },
    "SASUrl": {
      "type": "string",
      "metadata": {
        "description": "Shared Access Signature Url of the Partner destination storage account to store the content to, including the token (2nd hop)."
      }
    }
  },
  // Variables can apply functions to parameters or be hardcoded values.
  "variables": {
    // Name to give the Azure Data Factory pipeline created by the ARM template
    "dataFactoryName": "[concat('M365-', uniqueString(resourceGroup().id))]",
    // Name given to the storage account created in the Customer subscription (1st hop)
    "destinationAdlsAccountName": "[concat('astore', uniqueString(resourceGroup().id))]",
    // Name of the container in partner destination store to copy data to. It is required for the Azure Data Factory Blob Storage Linked Service. We extract it from the SAS URL. (2nd hop)
    "destinationContainer": "[split(split(parameters('SASUrl'), '/')[3], '?')[0]]",
    // The name of the final JSON file in partner destination store to copy data to (2nd hop)
    "destinationFileName": "[concat(split(parameters('SASUrl'), '?')[0], '/', concat(uniqueString(resourceGroup().id), '.json?'), split(parameters('SASUrl'), '?')[1])]"
  },
  "resources": [
    // Script to get the service principal from an app registration in the Customer subscription. Written by MGDC team.
    {
      "apiVersion": "2020-10-01",
      "kind": "AzurePowerShell",
      "location": "[resourceGroup().location]",
      "name": "ApplicationScript",
      "properties": {
        "forceUpdateTag": "1",
        "azPowerShellVersion": "3.0",
        "environmentVariables": [
          {
            "name": "AppSecret",
            "secureValue": "[parameters('AppSecret')]"
          }
        ],
        "arguments": "[format(' -AppID {0} -TenantId {1} -AppToGet {2}', parameters('AppId'), subscription().tenantId, parameters('AppId'))]",
        "primaryScriptUri": "https://raw.githubusercontent.com/NikCharlebois/dataconnect-solutions/main/ARMTemplates/SupportScripts/GetServicePricipalId.ps1",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "dependsOn": []
      },
      "type": "Microsoft.Resources/deploymentScripts"
    },
    // Storage account in Customer subscription (1st hop)
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('destinationAdlsAccountName')]",
      "location": "eastus2",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "isHnsEnabled": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    // Create a blob service resource (needed for blob operations) in the Customer storage account (1st hop)
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('destinationAdlsAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('destinationAdlsAccountName'))]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    // Create a container in the Customer storage account (1st hop)
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('destinationAdlsAccountName'), '/default/datasets')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('destinationAdlsAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('destinationAdlsAccountName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    // Add Contributor role assignment to the Customer storage account container (1st hop)
    {
      "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('destinationAdlsAccountName'), 'default', 'datasets')]"
      ],
      "name": "[concat(variables('destinationAdlsAccountName'),'/Microsoft.Authorization/',guid(resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference('ApplicationScript').outputs.PrincipalId]"
      }
    },
    // Add Storage Blob Data Contributor role assignment to the Customer storage account container (1st hop)
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/providers/roleAssignments",
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('destinationAdlsAccountName'), 'default', 'datasets')]"
      ],
      "name": "[concat(variables('destinationAdlsAccountName'), '/default/datasets/Microsoft.Authorization/', guid(concat('blobdatacontributor', resourceGroup().id)))]",
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference('ApplicationScript').outputs.PrincipalId]"
      }
    },
    // Add Azure Data Factory Resource
    {
      "name": "[variables('dataFactoryName')]",
      "apiVersion": "2018-06-01",
      "type": "Microsoft.DataFactory/factories",
      "comments": "Creates the ADF pipeline that copies data from O365 to the newly created destination ADLS.",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('destinationAdlsAccountName'))]"
      ],
      "location": "East US 2",
      "resources": [
        {
          "name": "[concat(variables('dataFactoryName'), '/AzureSelfHosted')]",
          "type": "Microsoft.DataFactory/factories/integrationRuntimes",
          "apiVersion": "2018-06-01",
          "properties": {
            "type": "Managed",
            "typeProperties": {
              "computeProperties": {
                "location": "East US 2",
                "dataFlowProperties": {
                  "computeType": "General",
                  "coreCount": 8,
                  "timeToLive": 10
                }
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
          ]
        },
        // Define Customer ADLS sink (1st hop)
        {
          "name": "[concat(variables('dataFactoryName'), '/ADLSSink')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobFS",
            "typeProperties": {
              "url": "[concat('https://', variables('destinationAdlsAccountName'), '.dfs.core.windows.net/')]",
              "tenant": "[subscription().tenantId]",
              "servicePrincipalId": "[parameters('AppId')]",
              "servicePrincipalCredentialType": "ServicePrincipalKey",
              "servicePrincipalCredential": {
                "type": "SecureString",
                "value": "[parameters('AppSecret')]"
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
            "[resourceId('Microsoft.Resources/deploymentScripts', 'ApplicationScript')]"
          ]
        },
        // Define Customer sink dataset
        {
          "name": "[concat(variables('dataFactoryName'), '/BinarySink')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "ADLSSink",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "Binary",
            "typeProperties": {
              "location": {
                "type": "AzureBlobFSLocation",
                "fileSystem": "datasets"
              }
            }
          },
          "dependsOn": [
            "ADLSSink",
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
          ]
        },
        // Define O365 source linked service (1st hop - this will be using MGDC)
        {
          "name": "[concat(variables('dataFactoryName'), '/Office365Service')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "Office365",
            "typeProperties": {
              "office365TenantId": "[subscription().tenantId]",
              "servicePrincipalTenantId": "[subscription().tenantId]",
              "servicePrincipalId": "[parameters('AppId')]",
              "servicePrincipalKey": {
                "type": "SecureString",
                "value": "[parameters('AppSecret')]"
              }
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
          ]
        },
        // Define the O365 source dataset to extract by MGDC (1st hop)
        {
          "name": "[concat(variables('dataFactoryName'), '/Office365DataSet', split(parameters('Dataset'), '.')[1])]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "Office365Service",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "Office365Table",
            "schema": [],
            "typeProperties": {
              "tableName": "[parameters('Dataset')]"
            }
          },
          "dependsOn": [
            "Office365Service",
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
          ]
        },
        // Define the Partner destination blob storage linked service (2nd hop)
        {
          "name": "[concat(variables('dataFactoryName'), '/DestinationBlobStorage')]",
          "type": "Microsoft.DataFactory/factories/linkedServices",
          "apiVersion": "2018-06-01",
          "properties": {
            "annotations": [],
            "type": "AzureBlobStorage",
            "typeProperties": {
              "sasUri": "[variables('destinationFileName')]"
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]" 
          ]
        },
        // Define the Partner destination container dataset (2nd hop)
        {
          "name": "[concat(variables('dataFactoryName'), '/DestinationBinary')]",
          "type": "Microsoft.DataFactory/factories/datasets",
          "apiVersion": "2018-06-01",
          "properties": {
            "linkedServiceName": {
              "referenceName": "DestinationBlobStorage",
              "type": "LinkedServiceReference"
            },
            "annotations": [],
            "type": "Binary",
            "typeProperties": {
              "location": {
                "type": "AzureBlobStorageLocation",
                "container": "[variables('destinationContainer')]"
              }
            }
          },
          "dependsOn": [
            "DestinationBlobStorage",
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
          ]
        },
        // Define a pipeline to export the events from O365 to Customer using MGDC (1st hop), then Customer to Partner (2nd hop)
        {
          "name": "[concat(variables('dataFactoryName'), '/ExportO365DataEvents')]",
          "type": "Microsoft.DataFactory/factories/pipelines",
          "apiVersion": "2018-06-01",
          "properties": {
            "activities": [
              {
                "name": "Copy Office 365 Data",
                "type": "Copy",
                "dependsOn": [],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "source": {
                    "type": "Office365Source",
                    "dateFilterColumn": "createdDateTime",
                    "startTime": "2010-07-01T00:00:00.000Z",
                    "endTime": "2035-04-21T00:00:00.000Z",
                    "userScopeFilterUri": "",
                    // Define the output columns selected
                    "outputColumns": [
                      {
                        "name": "id"
                      },
                      {
                        "name": "allowNewTimeProposals"
                      },
                      {
                        "name": "createdDateTime"
                      },
                      {
                        "name": "lastModifiedDateTime"
                      },
                      {
                        "name": "changeKey"
                      },
                      {
                        "name": "categories"
                      },
                      {
                        "name": "originalStartTimeZone"
                      },
                      {
                        "name": "originalEndTimeZone"
                      },
                      {
                        "name": "responseStatus"
                      },
                      {
                        "name": "iCalUId"
                      },
                      {
                        "name": "reminderMinutesBeforeStart"
                      },
                      {
                        "name": "isOnlineMeeting"
                      },
                      {
                        "name": "isReminderOn"
                      },
                      {
                        "name": "hasAttachments"
                      },
                      {
                        "name": "subject"
                      },
                      {
                        "name": "body"
                      },
                      {
                        "name": "importance"
                      },
                      {
                        "name": "sensitivity"
                      },
                      {
                        "name": "start"
                      },
                      {
                        "name": "end"
                      },
                      {
                        "name": "location"
                      },
                      {
                        "name": "isAllDay"
                      },
                      {
                        "name": "isCancelled"
                      },
                      {
                        "name": "isOrganizer"
                      },
                      {
                        "name": "onlineMeeting"
                      },
                      {
                        "name": "onlineMeetingProvider"
                      },
                      {
                        "name": "recurrence"
                      },
                      {
                        "name": "responseRequested"
                      },
                      {
                        "name": "showAs"
                      },
                      {
                        "name": "transactionId"
                      },
                      {
                        "name": "type"
                      },
                      {
                        "name": "attendees"
                      },
                      {
                        "name": "organizer"
                      },
                      {
                        "name": "webLink"
                      },
                      {
                        "name": "attachments"
                      },
                      {
                        "name": "bodyPreview"
                      },
                      {
                        "name": "locations"
                      },
                      {
                        "name": "onlineMeetingUrl"
                      },
                      {
                        "name": "originalStart"
                      },
                      {
                        "name": "seriesMasterId"
                      }
                    ]
                  },
                  "sink": {
                    "type": "BinarySink",
                    "storeSettings": {
                      "type": "AzureBlobFSWriteSettings"
                    }
                  },
                  "enableStaging": false
                },
                "inputs": [
                  {
                    "referenceName": "[concat('Office365DataSet',split(parameters('Dataset'), '.')[1])]",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ],
                "outputs": [
                  {
                    "referenceName": "BinarySink",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ]
              },
              {
                "name": "Export data to external tenant",
                "type": "Copy",
                "dependsOn": [
                  {
                    "activity": "Copy Office 365 Data",
                    "dependencyConditions": [
                      "Succeeded"
                    ]
                  }
                ],
                "policy": {
                  "timeout": "7.00:00:00",
                  "retry": 0,
                  "retryIntervalInSeconds": 30,
                  "secureOutput": false,
                  "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                  "source": {
                    "type": "BinarySource",
                    "storeSettings": {
                      "type": "AzureBlobFSReadSettings",
                      "recursive": true
                    },
                    "formatSettings": {
                      "type": "BinaryReadSettings"
                    }
                  },
                  "sink": {
                    "type": "BinarySink",
                    "storeSettings": {
                      "type": "AzureBlobStorageWriteSettings"
                    }
                  },
                  "enableStaging": false
                },
                "inputs": [
                  {
                    "referenceName": "BinarySink",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ],
                "outputs": [
                  {
                    "referenceName": "DestinationBinary",
                    "type": "DatasetReference",
                    "parameters": {}
                  }
                ]
              }
            ],
            "annotations": []
          },
          "dependsOn": [
            "[concat('Office365DataSet',split(parameters('Dataset'), '.')[1])]",
            "BinarySink",
            "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
          ]
        }
      ]
    },
    // Add a trigger that runs the pipeline once a day
    {
      "name": "[concat(variables('dataFactoryName'), '/ScheduledTrigger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Runs the pipeline once a day.",
        "annotations": [],
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "ExportO365DataEvents",
              "type": "PipelineReference"
            },
            "parameters": {}
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2021-10-08T18:04:00Z",
            "endTime": "2021-10-11T18:04:00Z",
            "timeZone": "UTC",
            "schedule": {}
          }
        }
      },
      "dependsOn": [
        "[concat(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '/pipelines/ExportO365DataEvents')]"
      ]
    }
  ]
}
